
4xx_LED_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b38  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ce4  08000ce4  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000ce4  08000ce4  00010ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000ce8  08000ce8  00010ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000ec  20000000  08000cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000200ec  2**0
                  CONTENTS
  7 .bss          00000020  200000ec  200000ec  000200ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000010c  2000010c  000200ec  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002680  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000a5c  00000000  00000000  0002279c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000218  00000000  00000000  000231f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000178  00000000  00000000  00023410  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001406  00000000  00000000  00023588  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001425  00000000  00000000  0002498e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00025db3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000005a8  00000000  00000000  00025e30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200000ec 	.word	0x200000ec
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000ccc 	.word	0x08000ccc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200000f0 	.word	0x200000f0
 80001e8:	08000ccc 	.word	0x08000ccc

080001ec <DAC_Driver_Init>:
 */

#include "DAC_Driver_Cfg.h"

void DAC_Driver_Init()
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	RCC->APB1ENR|=RCC_APB1ENR_DACEN;
 80001f0:	4a79      	ldr	r2, [pc, #484]	; (80003d8 <DAC_Driver_Init+0x1ec>)
 80001f2:	4b79      	ldr	r3, [pc, #484]	; (80003d8 <DAC_Driver_Init+0x1ec>)
 80001f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80001fa:	6413      	str	r3, [r2, #64]	; 0x40

	/*Stop DACs in case of initialization*/
	DAC->CR &= (DAC_DRIVER_CH1_OFF & DAC_DRIVER_CH1_OFF);
 80001fc:	4a77      	ldr	r2, [pc, #476]	; (80003dc <DAC_Driver_Init+0x1f0>)
 80001fe:	4b77      	ldr	r3, [pc, #476]	; (80003dc <DAC_Driver_Init+0x1f0>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f023 0301 	bic.w	r3, r3, #1
 8000206:	6013      	str	r3, [r2, #0]

	switch (DAC_SETUP->DAC_Channel_Count)
 8000208:	4b75      	ldr	r3, [pc, #468]	; (80003e0 <DAC_Driver_Init+0x1f4>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	881b      	ldrh	r3, [r3, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d002      	beq.n	8000218 <DAC_Driver_Init+0x2c>
 8000212:	2b01      	cmp	r3, #1
 8000214:	d04b      	beq.n	80002ae <DAC_Driver_Init+0xc2>
		break;
	};
/*	Once the DAC channelx is enabled, the corresponding GPIO pin (PA4 or PA5) is
	automatically connected to the analog converter output (DAC_OUTx). In order to avoid
	parasitic consumption, the PA4 or PA5 pin should first be configured to analog (AIN).*/
}
 8000216:	e0d9      	b.n	80003cc <DAC_Driver_Init+0x1e0>
		DAC->CR |= DAC_DRIVER_CH1_WAVE_SELECT(DAC_SETUP->DAC_Output_Signal_Type[DAC_DRIVER_CHANNEL1]);
 8000218:	4970      	ldr	r1, [pc, #448]	; (80003dc <DAC_Driver_Init+0x1f0>)
 800021a:	4b70      	ldr	r3, [pc, #448]	; (80003dc <DAC_Driver_Init+0x1f0>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a70      	ldr	r2, [pc, #448]	; (80003e0 <DAC_Driver_Init+0x1f4>)
 8000220:	6812      	ldr	r2, [r2, #0]
 8000222:	8852      	ldrh	r2, [r2, #2]
 8000224:	0192      	lsls	r2, r2, #6
 8000226:	4313      	orrs	r3, r2
 8000228:	600b      	str	r3, [r1, #0]
		if (DAC_SETUP->DAC_Output_Signal_Type[DAC_DRIVER_CHANNEL1]>DAC_Driver_Output_DEFAULT)
 800022a:	4b6d      	ldr	r3, [pc, #436]	; (80003e0 <DAC_Driver_Init+0x1f4>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	885b      	ldrh	r3, [r3, #2]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <DAC_Driver_Init+0x5a>
			DAC->CR |= DAC_DRIVER_CH1_SET_AMPLITUDE(DAC_SETUP->DAC_Output_Signal_Amplitude[DAC_DRIVER_CHANNEL1]);
 8000234:	4969      	ldr	r1, [pc, #420]	; (80003dc <DAC_Driver_Init+0x1f0>)
 8000236:	4b69      	ldr	r3, [pc, #420]	; (80003dc <DAC_Driver_Init+0x1f0>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a69      	ldr	r2, [pc, #420]	; (80003e0 <DAC_Driver_Init+0x1f4>)
 800023c:	6812      	ldr	r2, [r2, #0]
 800023e:	88d2      	ldrh	r2, [r2, #6]
 8000240:	0212      	lsls	r2, r2, #8
 8000242:	4313      	orrs	r3, r2
 8000244:	600b      	str	r3, [r1, #0]
		if ((DAC_SETUP->DAC_Trigger_Enable[DAC_DRIVER_CHANNEL1]) == OK )
 8000246:	4b66      	ldr	r3, [pc, #408]	; (80003e0 <DAC_Driver_Init+0x1f4>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	895b      	ldrh	r3, [r3, #10]
 800024c:	2b01      	cmp	r3, #1
 800024e:	d10f      	bne.n	8000270 <DAC_Driver_Init+0x84>
			DAC->CR |= DAC_DRIVER_CH1_TRIGGER_ENABLE;
 8000250:	4a62      	ldr	r2, [pc, #392]	; (80003dc <DAC_Driver_Init+0x1f0>)
 8000252:	4b62      	ldr	r3, [pc, #392]	; (80003dc <DAC_Driver_Init+0x1f0>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f043 0304 	orr.w	r3, r3, #4
 800025a:	6013      	str	r3, [r2, #0]
			DAC->CR |= DAC_DRIVER_CH1_TRIGGER_SELECT(DAC_SETUP->DAC_Trigger_Source[DAC_DRIVER_CHANNEL1]);
 800025c:	495f      	ldr	r1, [pc, #380]	; (80003dc <DAC_Driver_Init+0x1f0>)
 800025e:	4b5f      	ldr	r3, [pc, #380]	; (80003dc <DAC_Driver_Init+0x1f0>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a5f      	ldr	r2, [pc, #380]	; (80003e0 <DAC_Driver_Init+0x1f4>)
 8000264:	6812      	ldr	r2, [r2, #0]
 8000266:	89d2      	ldrh	r2, [r2, #14]
 8000268:	00d2      	lsls	r2, r2, #3
 800026a:	4313      	orrs	r3, r2
 800026c:	600b      	str	r3, [r1, #0]
 800026e:	e005      	b.n	800027c <DAC_Driver_Init+0x90>
			DAC->CR &= DAC_DRIVER_CH1_TRIGGER_DISABLE;
 8000270:	4a5a      	ldr	r2, [pc, #360]	; (80003dc <DAC_Driver_Init+0x1f0>)
 8000272:	4b5a      	ldr	r3, [pc, #360]	; (80003dc <DAC_Driver_Init+0x1f0>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f023 0304 	bic.w	r3, r3, #4
 800027a:	6013      	str	r3, [r2, #0]
		if ((DAC_SETUP->DAC_Output_Buffer_Enable[DAC_DRIVER_CHANNEL1]) == OK )
 800027c:	4b58      	ldr	r3, [pc, #352]	; (80003e0 <DAC_Driver_Init+0x1f4>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	8a5b      	ldrh	r3, [r3, #18]
 8000282:	2b01      	cmp	r3, #1
 8000284:	d106      	bne.n	8000294 <DAC_Driver_Init+0xa8>
			DAC->CR &= DAC_DRIVER_OUTPUT_BUFFER1_ON;
 8000286:	4a55      	ldr	r2, [pc, #340]	; (80003dc <DAC_Driver_Init+0x1f0>)
 8000288:	4b54      	ldr	r3, [pc, #336]	; (80003dc <DAC_Driver_Init+0x1f0>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f023 0302 	bic.w	r3, r3, #2
 8000290:	6013      	str	r3, [r2, #0]
 8000292:	e005      	b.n	80002a0 <DAC_Driver_Init+0xb4>
			DAC->CR |= DAC_DRIVER_OUTPUT_BUFFER1_OFF;
 8000294:	4a51      	ldr	r2, [pc, #324]	; (80003dc <DAC_Driver_Init+0x1f0>)
 8000296:	4b51      	ldr	r3, [pc, #324]	; (80003dc <DAC_Driver_Init+0x1f0>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	f043 0302 	orr.w	r3, r3, #2
 800029e:	6013      	str	r3, [r2, #0]
		DAC->CR |= DAC_DRIVER_CH1_ON;
 80002a0:	4a4e      	ldr	r2, [pc, #312]	; (80003dc <DAC_Driver_Init+0x1f0>)
 80002a2:	4b4e      	ldr	r3, [pc, #312]	; (80003dc <DAC_Driver_Init+0x1f0>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f043 0301 	orr.w	r3, r3, #1
 80002aa:	6013      	str	r3, [r2, #0]
		break;
 80002ac:	e08e      	b.n	80003cc <DAC_Driver_Init+0x1e0>
		DAC->CR |= DAC_DRIVER_CH1_WAVE_SELECT(DAC_SETUP->DAC_Output_Signal_Type[DAC_DRIVER_CHANNEL1]);
 80002ae:	494b      	ldr	r1, [pc, #300]	; (80003dc <DAC_Driver_Init+0x1f0>)
 80002b0:	4b4a      	ldr	r3, [pc, #296]	; (80003dc <DAC_Driver_Init+0x1f0>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a4a      	ldr	r2, [pc, #296]	; (80003e0 <DAC_Driver_Init+0x1f4>)
 80002b6:	6812      	ldr	r2, [r2, #0]
 80002b8:	8852      	ldrh	r2, [r2, #2]
 80002ba:	0192      	lsls	r2, r2, #6
 80002bc:	4313      	orrs	r3, r2
 80002be:	600b      	str	r3, [r1, #0]
		DAC->CR |= DAC_DRIVER_CH2_WAVE_SELECT(DAC_SETUP->DAC_Output_Signal_Type[DAC_DRIVER_CHANNEL2]);
 80002c0:	4946      	ldr	r1, [pc, #280]	; (80003dc <DAC_Driver_Init+0x1f0>)
 80002c2:	4b46      	ldr	r3, [pc, #280]	; (80003dc <DAC_Driver_Init+0x1f0>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a46      	ldr	r2, [pc, #280]	; (80003e0 <DAC_Driver_Init+0x1f4>)
 80002c8:	6812      	ldr	r2, [r2, #0]
 80002ca:	8892      	ldrh	r2, [r2, #4]
 80002cc:	0592      	lsls	r2, r2, #22
 80002ce:	4313      	orrs	r3, r2
 80002d0:	600b      	str	r3, [r1, #0]
		if (DAC_SETUP->DAC_Output_Signal_Type[DAC_DRIVER_CHANNEL1]>DAC_Driver_Output_DEFAULT)
 80002d2:	4b43      	ldr	r3, [pc, #268]	; (80003e0 <DAC_Driver_Init+0x1f4>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	885b      	ldrh	r3, [r3, #2]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <DAC_Driver_Init+0x102>
			DAC->CR |= DAC_DRIVER_CH1_SET_AMPLITUDE(DAC_SETUP->DAC_Output_Signal_Amplitude[DAC_DRIVER_CHANNEL1]);
 80002dc:	493f      	ldr	r1, [pc, #252]	; (80003dc <DAC_Driver_Init+0x1f0>)
 80002de:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <DAC_Driver_Init+0x1f0>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	4a3f      	ldr	r2, [pc, #252]	; (80003e0 <DAC_Driver_Init+0x1f4>)
 80002e4:	6812      	ldr	r2, [r2, #0]
 80002e6:	88d2      	ldrh	r2, [r2, #6]
 80002e8:	0212      	lsls	r2, r2, #8
 80002ea:	4313      	orrs	r3, r2
 80002ec:	600b      	str	r3, [r1, #0]
		if (DAC_SETUP->DAC_Output_Signal_Type[DAC_DRIVER_CHANNEL2]>DAC_Driver_Output_DEFAULT)
 80002ee:	4b3c      	ldr	r3, [pc, #240]	; (80003e0 <DAC_Driver_Init+0x1f4>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	889b      	ldrh	r3, [r3, #4]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d008      	beq.n	800030a <DAC_Driver_Init+0x11e>
			DAC->CR |= DAC_DRIVER_CH2_SET_AMPLITUDE(DAC_SETUP->DAC_Output_Signal_Amplitude[DAC_DRIVER_CHANNEL2]);
 80002f8:	4938      	ldr	r1, [pc, #224]	; (80003dc <DAC_Driver_Init+0x1f0>)
 80002fa:	4b38      	ldr	r3, [pc, #224]	; (80003dc <DAC_Driver_Init+0x1f0>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a38      	ldr	r2, [pc, #224]	; (80003e0 <DAC_Driver_Init+0x1f4>)
 8000300:	6812      	ldr	r2, [r2, #0]
 8000302:	8912      	ldrh	r2, [r2, #8]
 8000304:	0612      	lsls	r2, r2, #24
 8000306:	4313      	orrs	r3, r2
 8000308:	600b      	str	r3, [r1, #0]
		if ((DAC_SETUP->DAC_Trigger_Enable[DAC_DRIVER_CHANNEL1]) == OK )
 800030a:	4b35      	ldr	r3, [pc, #212]	; (80003e0 <DAC_Driver_Init+0x1f4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	895b      	ldrh	r3, [r3, #10]
 8000310:	2b01      	cmp	r3, #1
 8000312:	d10f      	bne.n	8000334 <DAC_Driver_Init+0x148>
			DAC->CR |= DAC_DRIVER_CH1_TRIGGER_ENABLE;
 8000314:	4a31      	ldr	r2, [pc, #196]	; (80003dc <DAC_Driver_Init+0x1f0>)
 8000316:	4b31      	ldr	r3, [pc, #196]	; (80003dc <DAC_Driver_Init+0x1f0>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f043 0304 	orr.w	r3, r3, #4
 800031e:	6013      	str	r3, [r2, #0]
			DAC->CR |= DAC_DRIVER_CH1_TRIGGER_SELECT(DAC_SETUP->DAC_Trigger_Source[DAC_DRIVER_CHANNEL1]);
 8000320:	492e      	ldr	r1, [pc, #184]	; (80003dc <DAC_Driver_Init+0x1f0>)
 8000322:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <DAC_Driver_Init+0x1f0>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a2e      	ldr	r2, [pc, #184]	; (80003e0 <DAC_Driver_Init+0x1f4>)
 8000328:	6812      	ldr	r2, [r2, #0]
 800032a:	89d2      	ldrh	r2, [r2, #14]
 800032c:	00d2      	lsls	r2, r2, #3
 800032e:	4313      	orrs	r3, r2
 8000330:	600b      	str	r3, [r1, #0]
 8000332:	e005      	b.n	8000340 <DAC_Driver_Init+0x154>
			DAC->CR &= DAC_DRIVER_CH1_TRIGGER_DISABLE;
 8000334:	4a29      	ldr	r2, [pc, #164]	; (80003dc <DAC_Driver_Init+0x1f0>)
 8000336:	4b29      	ldr	r3, [pc, #164]	; (80003dc <DAC_Driver_Init+0x1f0>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f023 0304 	bic.w	r3, r3, #4
 800033e:	6013      	str	r3, [r2, #0]
		if ((DAC_SETUP->DAC_Trigger_Enable[DAC_DRIVER_CHANNEL2]) == OK )
 8000340:	4b27      	ldr	r3, [pc, #156]	; (80003e0 <DAC_Driver_Init+0x1f4>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	899b      	ldrh	r3, [r3, #12]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d10f      	bne.n	800036a <DAC_Driver_Init+0x17e>
			DAC->CR |= DAC_DRIVER_CH2_TRIGGER_ENABLE;
 800034a:	4a24      	ldr	r2, [pc, #144]	; (80003dc <DAC_Driver_Init+0x1f0>)
 800034c:	4b23      	ldr	r3, [pc, #140]	; (80003dc <DAC_Driver_Init+0x1f0>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000354:	6013      	str	r3, [r2, #0]
			DAC->CR |= DAC_DRIVER_CH2_TRIGGER_SELECT(DAC_SETUP->DAC_Trigger_Source[DAC_DRIVER_CHANNEL2]);
 8000356:	4921      	ldr	r1, [pc, #132]	; (80003dc <DAC_Driver_Init+0x1f0>)
 8000358:	4b20      	ldr	r3, [pc, #128]	; (80003dc <DAC_Driver_Init+0x1f0>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a20      	ldr	r2, [pc, #128]	; (80003e0 <DAC_Driver_Init+0x1f4>)
 800035e:	6812      	ldr	r2, [r2, #0]
 8000360:	8a12      	ldrh	r2, [r2, #16]
 8000362:	04d2      	lsls	r2, r2, #19
 8000364:	4313      	orrs	r3, r2
 8000366:	600b      	str	r3, [r1, #0]
 8000368:	e005      	b.n	8000376 <DAC_Driver_Init+0x18a>
			DAC->CR &= DAC_DRIVER_CH2_TRIGGER_DISABLE;
 800036a:	4a1c      	ldr	r2, [pc, #112]	; (80003dc <DAC_Driver_Init+0x1f0>)
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <DAC_Driver_Init+0x1f0>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000374:	6013      	str	r3, [r2, #0]
		if ((DAC_SETUP->DAC_Output_Buffer_Enable[DAC_DRIVER_CHANNEL1]) == OK )
 8000376:	4b1a      	ldr	r3, [pc, #104]	; (80003e0 <DAC_Driver_Init+0x1f4>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	8a5b      	ldrh	r3, [r3, #18]
 800037c:	2b01      	cmp	r3, #1
 800037e:	d106      	bne.n	800038e <DAC_Driver_Init+0x1a2>
			DAC->CR &= DAC_DRIVER_OUTPUT_BUFFER1_ON;
 8000380:	4a16      	ldr	r2, [pc, #88]	; (80003dc <DAC_Driver_Init+0x1f0>)
 8000382:	4b16      	ldr	r3, [pc, #88]	; (80003dc <DAC_Driver_Init+0x1f0>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f023 0302 	bic.w	r3, r3, #2
 800038a:	6013      	str	r3, [r2, #0]
 800038c:	e005      	b.n	800039a <DAC_Driver_Init+0x1ae>
			DAC->CR |= DAC_DRIVER_OUTPUT_BUFFER1_OFF;
 800038e:	4a13      	ldr	r2, [pc, #76]	; (80003dc <DAC_Driver_Init+0x1f0>)
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <DAC_Driver_Init+0x1f0>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f043 0302 	orr.w	r3, r3, #2
 8000398:	6013      	str	r3, [r2, #0]
		if ((DAC_SETUP->DAC_Output_Buffer_Enable[DAC_DRIVER_CHANNEL2]) == OK )
 800039a:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <DAC_Driver_Init+0x1f4>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	8a9b      	ldrh	r3, [r3, #20]
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d106      	bne.n	80003b2 <DAC_Driver_Init+0x1c6>
			DAC->CR &= DAC_DRIVER_OUTPUT_BUFFER2_ON;
 80003a4:	4a0d      	ldr	r2, [pc, #52]	; (80003dc <DAC_Driver_Init+0x1f0>)
 80003a6:	4b0d      	ldr	r3, [pc, #52]	; (80003dc <DAC_Driver_Init+0x1f0>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80003ae:	6013      	str	r3, [r2, #0]
 80003b0:	e005      	b.n	80003be <DAC_Driver_Init+0x1d2>
			DAC->CR |= DAC_DRIVER_OUTPUT_BUFFER2_OFF;
 80003b2:	4a0a      	ldr	r2, [pc, #40]	; (80003dc <DAC_Driver_Init+0x1f0>)
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <DAC_Driver_Init+0x1f0>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003bc:	6013      	str	r3, [r2, #0]
		DAC->CR |= (DAC_DRIVER_CH1_ON|DAC_DRIVER_CH2_ON);
 80003be:	4a07      	ldr	r2, [pc, #28]	; (80003dc <DAC_Driver_Init+0x1f0>)
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <DAC_Driver_Init+0x1f0>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80003c8:	6013      	str	r3, [r2, #0]
		break;
 80003ca:	bf00      	nop
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40023800 	.word	0x40023800
 80003dc:	40007400 	.word	0x40007400
 80003e0:	2000001c 	.word	0x2000001c

080003e4 <DAC_Driver_SW_Start>:
			break;
	};
}

void DAC_Driver_SW_Start(uint8 DAC_Channel_Number)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	71fb      	strb	r3, [r7, #7]
	/*When software trigger is selected, the transfer from the DAC_DHRx register to the
	DAC_DORx register takes only one APB1 clock cycle.*/

	if(DAC_Channel_Number == DAC_DRIVER_CHANNEL1)
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d106      	bne.n	8000402 <DAC_Driver_SW_Start+0x1e>
	{
		DAC->SWTRIGR|=DAC_DRIVER_SW_TRIGGER_CH1;
 80003f4:	4a0a      	ldr	r2, [pc, #40]	; (8000420 <DAC_Driver_SW_Start+0x3c>)
 80003f6:	4b0a      	ldr	r3, [pc, #40]	; (8000420 <DAC_Driver_SW_Start+0x3c>)
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	f043 0301 	orr.w	r3, r3, #1
 80003fe:	6053      	str	r3, [r2, #4]
	}
	else
	{
		/*Nothing to do*/
	}
}
 8000400:	e008      	b.n	8000414 <DAC_Driver_SW_Start+0x30>
	else if(DAC_Channel_Number == DAC_DRIVER_CHANNEL2)
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	2b01      	cmp	r3, #1
 8000406:	d105      	bne.n	8000414 <DAC_Driver_SW_Start+0x30>
		DAC->SWTRIGR|=DAC_DRIVER_SW_TRIGGER_CH2;
 8000408:	4a05      	ldr	r2, [pc, #20]	; (8000420 <DAC_Driver_SW_Start+0x3c>)
 800040a:	4b05      	ldr	r3, [pc, #20]	; (8000420 <DAC_Driver_SW_Start+0x3c>)
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	f043 0302 	orr.w	r3, r3, #2
 8000412:	6053      	str	r3, [r2, #4]
}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr
 8000420:	40007400 	.word	0x40007400

08000424 <GPIO_Driver_Init>:

#include "GPIO_Driver_Cfg.h"

/*Initialize the selected GPIO modules*/
void GPIO_Driver_Init()
{
 8000424:	b4b0      	push	{r4, r5, r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
	uint16 index = 0x00;
 800042a:	2300      	movs	r3, #0
 800042c:	80fb      	strh	r3, [r7, #6]
	uint16 index1 = 0x00;
 800042e:	2300      	movs	r3, #0
 8000430:	80bb      	strh	r3, [r7, #4]

	/*Enable the selected peripheral's clock signal*/

	#if GPIO_DRIVER_GPIOA!=NOK
		RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN;
 8000432:	4a7b      	ldr	r2, [pc, #492]	; (8000620 <GPIO_Driver_Init+0x1fc>)
 8000434:	4b7a      	ldr	r3, [pc, #488]	; (8000620 <GPIO_Driver_Init+0x1fc>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	6313      	str	r3, [r2, #48]	; 0x30
	#endif
	#if GPIO_DRIVER_GPIOK!=NOK
		RCC->AHB1ENR|=RCC_AHB1ENR_GPIOKEN;
	#endif

	for(index=0x00;index<GPIO_DRIVER_INSTANCE_NUM;index++)
 800043e:	2300      	movs	r3, #0
 8000440:	80fb      	strh	r3, [r7, #6]
 8000442:	e20d      	b.n	8000860 <GPIO_Driver_Init+0x43c>
	{
		for(index1=0x00;index1<GPIO_SETUP[index].GPIO_Pin_nr;index1++)
 8000444:	2300      	movs	r3, #0
 8000446:	80bb      	strh	r3, [r7, #4]
 8000448:	e1fb      	b.n	8000842 <GPIO_Driver_Init+0x41e>
		{
				/*The first step is to clear the default setting*/

				GPIO_SETUP[index].GPIO_Port->MODER     &= (~((uint32)(0x03 <<(2*(GPIO_SETUP[index].GPIO_Pins[index1])))));
 800044a:	4b76      	ldr	r3, [pc, #472]	; (8000624 <GPIO_Driver_Init+0x200>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	88fb      	ldrh	r3, [r7, #6]
 8000450:	21c8      	movs	r1, #200	; 0xc8
 8000452:	fb01 f303 	mul.w	r3, r1, r3
 8000456:	4413      	add	r3, r2
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b72      	ldr	r3, [pc, #456]	; (8000624 <GPIO_Driver_Init+0x200>)
 800045c:	6819      	ldr	r1, [r3, #0]
 800045e:	88fb      	ldrh	r3, [r7, #6]
 8000460:	20c8      	movs	r0, #200	; 0xc8
 8000462:	fb00 f303 	mul.w	r3, r0, r3
 8000466:	440b      	add	r3, r1
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	6819      	ldr	r1, [r3, #0]
 800046c:	4b6d      	ldr	r3, [pc, #436]	; (8000624 <GPIO_Driver_Init+0x200>)
 800046e:	6818      	ldr	r0, [r3, #0]
 8000470:	88fb      	ldrh	r3, [r7, #6]
 8000472:	24c8      	movs	r4, #200	; 0xc8
 8000474:	fb04 f303 	mul.w	r3, r4, r3
 8000478:	4418      	add	r0, r3
 800047a:	88bb      	ldrh	r3, [r7, #4]
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	4403      	add	r3, r0
 8000480:	88db      	ldrh	r3, [r3, #6]
 8000482:	005b      	lsls	r3, r3, #1
 8000484:	2003      	movs	r0, #3
 8000486:	fa00 f303 	lsl.w	r3, r0, r3
 800048a:	43db      	mvns	r3, r3
 800048c:	400b      	ands	r3, r1
 800048e:	6013      	str	r3, [r2, #0]
				GPIO_SETUP[index].GPIO_Port->OTYPER    &= (~((uint16)(0x01 <<(GPIO_SETUP[index].GPIO_Pins[index1]))));
 8000490:	4b64      	ldr	r3, [pc, #400]	; (8000624 <GPIO_Driver_Init+0x200>)
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	88fb      	ldrh	r3, [r7, #6]
 8000496:	21c8      	movs	r1, #200	; 0xc8
 8000498:	fb01 f303 	mul.w	r3, r1, r3
 800049c:	4413      	add	r3, r2
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	4b60      	ldr	r3, [pc, #384]	; (8000624 <GPIO_Driver_Init+0x200>)
 80004a2:	6819      	ldr	r1, [r3, #0]
 80004a4:	88fb      	ldrh	r3, [r7, #6]
 80004a6:	20c8      	movs	r0, #200	; 0xc8
 80004a8:	fb00 f303 	mul.w	r3, r0, r3
 80004ac:	440b      	add	r3, r1
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	6859      	ldr	r1, [r3, #4]
 80004b2:	4b5c      	ldr	r3, [pc, #368]	; (8000624 <GPIO_Driver_Init+0x200>)
 80004b4:	6818      	ldr	r0, [r3, #0]
 80004b6:	88fb      	ldrh	r3, [r7, #6]
 80004b8:	24c8      	movs	r4, #200	; 0xc8
 80004ba:	fb04 f303 	mul.w	r3, r4, r3
 80004be:	4418      	add	r0, r3
 80004c0:	88bb      	ldrh	r3, [r7, #4]
 80004c2:	005b      	lsls	r3, r3, #1
 80004c4:	4403      	add	r3, r0
 80004c6:	88db      	ldrh	r3, [r3, #6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2301      	movs	r3, #1
 80004cc:	4083      	lsls	r3, r0
 80004ce:	b29b      	uxth	r3, r3
 80004d0:	43db      	mvns	r3, r3
 80004d2:	400b      	ands	r3, r1
 80004d4:	6053      	str	r3, [r2, #4]
				GPIO_SETUP[index].GPIO_Port->OSPEEDR   &= (~((uint32)(0x03 <<(2*(GPIO_SETUP[index].GPIO_Pins[index1])))));
 80004d6:	4b53      	ldr	r3, [pc, #332]	; (8000624 <GPIO_Driver_Init+0x200>)
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	88fb      	ldrh	r3, [r7, #6]
 80004dc:	21c8      	movs	r1, #200	; 0xc8
 80004de:	fb01 f303 	mul.w	r3, r1, r3
 80004e2:	4413      	add	r3, r2
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	4b4f      	ldr	r3, [pc, #316]	; (8000624 <GPIO_Driver_Init+0x200>)
 80004e8:	6819      	ldr	r1, [r3, #0]
 80004ea:	88fb      	ldrh	r3, [r7, #6]
 80004ec:	20c8      	movs	r0, #200	; 0xc8
 80004ee:	fb00 f303 	mul.w	r3, r0, r3
 80004f2:	440b      	add	r3, r1
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	6899      	ldr	r1, [r3, #8]
 80004f8:	4b4a      	ldr	r3, [pc, #296]	; (8000624 <GPIO_Driver_Init+0x200>)
 80004fa:	6818      	ldr	r0, [r3, #0]
 80004fc:	88fb      	ldrh	r3, [r7, #6]
 80004fe:	24c8      	movs	r4, #200	; 0xc8
 8000500:	fb04 f303 	mul.w	r3, r4, r3
 8000504:	4418      	add	r0, r3
 8000506:	88bb      	ldrh	r3, [r7, #4]
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	4403      	add	r3, r0
 800050c:	88db      	ldrh	r3, [r3, #6]
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	2003      	movs	r0, #3
 8000512:	fa00 f303 	lsl.w	r3, r0, r3
 8000516:	43db      	mvns	r3, r3
 8000518:	400b      	ands	r3, r1
 800051a:	6093      	str	r3, [r2, #8]
				GPIO_SETUP[index].GPIO_Port->PUPDR     &= (~((uint32)(0x03 <<(2*(GPIO_SETUP[index].GPIO_Pins[index1])))));
 800051c:	4b41      	ldr	r3, [pc, #260]	; (8000624 <GPIO_Driver_Init+0x200>)
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	88fb      	ldrh	r3, [r7, #6]
 8000522:	21c8      	movs	r1, #200	; 0xc8
 8000524:	fb01 f303 	mul.w	r3, r1, r3
 8000528:	4413      	add	r3, r2
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	4b3d      	ldr	r3, [pc, #244]	; (8000624 <GPIO_Driver_Init+0x200>)
 800052e:	6819      	ldr	r1, [r3, #0]
 8000530:	88fb      	ldrh	r3, [r7, #6]
 8000532:	20c8      	movs	r0, #200	; 0xc8
 8000534:	fb00 f303 	mul.w	r3, r0, r3
 8000538:	440b      	add	r3, r1
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	68d9      	ldr	r1, [r3, #12]
 800053e:	4b39      	ldr	r3, [pc, #228]	; (8000624 <GPIO_Driver_Init+0x200>)
 8000540:	6818      	ldr	r0, [r3, #0]
 8000542:	88fb      	ldrh	r3, [r7, #6]
 8000544:	24c8      	movs	r4, #200	; 0xc8
 8000546:	fb04 f303 	mul.w	r3, r4, r3
 800054a:	4418      	add	r0, r3
 800054c:	88bb      	ldrh	r3, [r7, #4]
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	4403      	add	r3, r0
 8000552:	88db      	ldrh	r3, [r3, #6]
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	2003      	movs	r0, #3
 8000558:	fa00 f303 	lsl.w	r3, r0, r3
 800055c:	43db      	mvns	r3, r3
 800055e:	400b      	ands	r3, r1
 8000560:	60d3      	str	r3, [r2, #12]

				if(GPIO_SETUP[index].GPIO_Pins[index1]<0x08)
 8000562:	4b30      	ldr	r3, [pc, #192]	; (8000624 <GPIO_Driver_Init+0x200>)
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	88fb      	ldrh	r3, [r7, #6]
 8000568:	21c8      	movs	r1, #200	; 0xc8
 800056a:	fb01 f303 	mul.w	r3, r1, r3
 800056e:	441a      	add	r2, r3
 8000570:	88bb      	ldrh	r3, [r7, #4]
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	4413      	add	r3, r2
 8000576:	88db      	ldrh	r3, [r3, #6]
 8000578:	2b07      	cmp	r3, #7
 800057a:	d855      	bhi.n	8000628 <GPIO_Driver_Init+0x204>
				{
					/*clear the default alternate function and set the new one*/

					GPIO_SETUP[index].GPIO_Port->AFR[0]    &= (~((uint32)(0x0F <<(4*(GPIO_SETUP[index].GPIO_Pins[index1])))));
 800057c:	4b29      	ldr	r3, [pc, #164]	; (8000624 <GPIO_Driver_Init+0x200>)
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	88fb      	ldrh	r3, [r7, #6]
 8000582:	21c8      	movs	r1, #200	; 0xc8
 8000584:	fb01 f303 	mul.w	r3, r1, r3
 8000588:	4413      	add	r3, r2
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	4b25      	ldr	r3, [pc, #148]	; (8000624 <GPIO_Driver_Init+0x200>)
 800058e:	6819      	ldr	r1, [r3, #0]
 8000590:	88fb      	ldrh	r3, [r7, #6]
 8000592:	20c8      	movs	r0, #200	; 0xc8
 8000594:	fb00 f303 	mul.w	r3, r0, r3
 8000598:	440b      	add	r3, r1
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	6a19      	ldr	r1, [r3, #32]
 800059e:	4b21      	ldr	r3, [pc, #132]	; (8000624 <GPIO_Driver_Init+0x200>)
 80005a0:	6818      	ldr	r0, [r3, #0]
 80005a2:	88fb      	ldrh	r3, [r7, #6]
 80005a4:	24c8      	movs	r4, #200	; 0xc8
 80005a6:	fb04 f303 	mul.w	r3, r4, r3
 80005aa:	4418      	add	r0, r3
 80005ac:	88bb      	ldrh	r3, [r7, #4]
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	4403      	add	r3, r0
 80005b2:	88db      	ldrh	r3, [r3, #6]
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	200f      	movs	r0, #15
 80005b8:	fa00 f303 	lsl.w	r3, r0, r3
 80005bc:	43db      	mvns	r3, r3
 80005be:	400b      	ands	r3, r1
 80005c0:	6213      	str	r3, [r2, #32]
					GPIO_SETUP[index].GPIO_Port->AFR[0]    |= ((uint32)((GPIO_SETUP[index].GPIO_Pin_Alternate_function[index1]) <<(4*(GPIO_SETUP[index].GPIO_Pins[index1]))));
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <GPIO_Driver_Init+0x200>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	21c8      	movs	r1, #200	; 0xc8
 80005ca:	fb01 f303 	mul.w	r3, r1, r3
 80005ce:	4413      	add	r3, r2
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	4b14      	ldr	r3, [pc, #80]	; (8000624 <GPIO_Driver_Init+0x200>)
 80005d4:	6819      	ldr	r1, [r3, #0]
 80005d6:	88fb      	ldrh	r3, [r7, #6]
 80005d8:	20c8      	movs	r0, #200	; 0xc8
 80005da:	fb00 f303 	mul.w	r3, r0, r3
 80005de:	440b      	add	r3, r1
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	6a19      	ldr	r1, [r3, #32]
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <GPIO_Driver_Init+0x200>)
 80005e6:	6818      	ldr	r0, [r3, #0]
 80005e8:	88fb      	ldrh	r3, [r7, #6]
 80005ea:	24c8      	movs	r4, #200	; 0xc8
 80005ec:	fb04 f303 	mul.w	r3, r4, r3
 80005f0:	4418      	add	r0, r3
 80005f2:	88bb      	ldrh	r3, [r7, #4]
 80005f4:	3350      	adds	r3, #80	; 0x50
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	4403      	add	r3, r0
 80005fa:	88db      	ldrh	r3, [r3, #6]
 80005fc:	461d      	mov	r5, r3
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <GPIO_Driver_Init+0x200>)
 8000600:	6818      	ldr	r0, [r3, #0]
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	24c8      	movs	r4, #200	; 0xc8
 8000606:	fb04 f303 	mul.w	r3, r4, r3
 800060a:	4418      	add	r0, r3
 800060c:	88bb      	ldrh	r3, [r7, #4]
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	4403      	add	r3, r0
 8000612:	88db      	ldrh	r3, [r3, #6]
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	fa05 f303 	lsl.w	r3, r5, r3
 800061a:	430b      	orrs	r3, r1
 800061c:	6213      	str	r3, [r2, #32]
 800061e:	e055      	b.n	80006cc <GPIO_Driver_Init+0x2a8>
 8000620:	40023800 	.word	0x40023800
 8000624:	200000e8 	.word	0x200000e8

				}
				else
				{
					GPIO_SETUP[index].GPIO_Port->AFR[1]    &= (~((uint32)(0x0F <<(4*(GPIO_SETUP[index].GPIO_Pins[index1])))));
 8000628:	4b92      	ldr	r3, [pc, #584]	; (8000874 <GPIO_Driver_Init+0x450>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	88fb      	ldrh	r3, [r7, #6]
 800062e:	21c8      	movs	r1, #200	; 0xc8
 8000630:	fb01 f303 	mul.w	r3, r1, r3
 8000634:	4413      	add	r3, r2
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	4b8e      	ldr	r3, [pc, #568]	; (8000874 <GPIO_Driver_Init+0x450>)
 800063a:	6819      	ldr	r1, [r3, #0]
 800063c:	88fb      	ldrh	r3, [r7, #6]
 800063e:	20c8      	movs	r0, #200	; 0xc8
 8000640:	fb00 f303 	mul.w	r3, r0, r3
 8000644:	440b      	add	r3, r1
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800064a:	4b8a      	ldr	r3, [pc, #552]	; (8000874 <GPIO_Driver_Init+0x450>)
 800064c:	6818      	ldr	r0, [r3, #0]
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	24c8      	movs	r4, #200	; 0xc8
 8000652:	fb04 f303 	mul.w	r3, r4, r3
 8000656:	4418      	add	r0, r3
 8000658:	88bb      	ldrh	r3, [r7, #4]
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	4403      	add	r3, r0
 800065e:	88db      	ldrh	r3, [r3, #6]
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	200f      	movs	r0, #15
 8000664:	fa00 f303 	lsl.w	r3, r0, r3
 8000668:	43db      	mvns	r3, r3
 800066a:	400b      	ands	r3, r1
 800066c:	6253      	str	r3, [r2, #36]	; 0x24
					GPIO_SETUP[index].GPIO_Port->AFR[1]    |= ((uint32)((GPIO_SETUP[index].GPIO_Pin_Alternate_function[index1]) <<(4*((GPIO_SETUP[index].GPIO_Pins[index1])-8))));
 800066e:	4b81      	ldr	r3, [pc, #516]	; (8000874 <GPIO_Driver_Init+0x450>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	88fb      	ldrh	r3, [r7, #6]
 8000674:	21c8      	movs	r1, #200	; 0xc8
 8000676:	fb01 f303 	mul.w	r3, r1, r3
 800067a:	4413      	add	r3, r2
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	4b7d      	ldr	r3, [pc, #500]	; (8000874 <GPIO_Driver_Init+0x450>)
 8000680:	6819      	ldr	r1, [r3, #0]
 8000682:	88fb      	ldrh	r3, [r7, #6]
 8000684:	20c8      	movs	r0, #200	; 0xc8
 8000686:	fb00 f303 	mul.w	r3, r0, r3
 800068a:	440b      	add	r3, r1
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000690:	4b78      	ldr	r3, [pc, #480]	; (8000874 <GPIO_Driver_Init+0x450>)
 8000692:	6818      	ldr	r0, [r3, #0]
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	24c8      	movs	r4, #200	; 0xc8
 8000698:	fb04 f303 	mul.w	r3, r4, r3
 800069c:	4418      	add	r0, r3
 800069e:	88bb      	ldrh	r3, [r7, #4]
 80006a0:	3350      	adds	r3, #80	; 0x50
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4403      	add	r3, r0
 80006a6:	88db      	ldrh	r3, [r3, #6]
 80006a8:	461d      	mov	r5, r3
 80006aa:	4b72      	ldr	r3, [pc, #456]	; (8000874 <GPIO_Driver_Init+0x450>)
 80006ac:	6818      	ldr	r0, [r3, #0]
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	24c8      	movs	r4, #200	; 0xc8
 80006b2:	fb04 f303 	mul.w	r3, r4, r3
 80006b6:	4418      	add	r0, r3
 80006b8:	88bb      	ldrh	r3, [r7, #4]
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	4403      	add	r3, r0
 80006be:	88db      	ldrh	r3, [r3, #6]
 80006c0:	3b08      	subs	r3, #8
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	fa05 f303 	lsl.w	r3, r5, r3
 80006c8:	430b      	orrs	r3, r1
 80006ca:	6253      	str	r3, [r2, #36]	; 0x24
				}

				/*Set the GPIO configuration*/

				GPIO_SETUP[index].GPIO_Port->MODER     |= ((uint32)((GPIO_SETUP[index].GPIO_Pin_Mode[index1]) <<(2*(GPIO_SETUP[index].GPIO_Pins[index1]))));
 80006cc:	4b69      	ldr	r3, [pc, #420]	; (8000874 <GPIO_Driver_Init+0x450>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	88fb      	ldrh	r3, [r7, #6]
 80006d2:	21c8      	movs	r1, #200	; 0xc8
 80006d4:	fb01 f303 	mul.w	r3, r1, r3
 80006d8:	4413      	add	r3, r2
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b65      	ldr	r3, [pc, #404]	; (8000874 <GPIO_Driver_Init+0x450>)
 80006de:	6819      	ldr	r1, [r3, #0]
 80006e0:	88fb      	ldrh	r3, [r7, #6]
 80006e2:	20c8      	movs	r0, #200	; 0xc8
 80006e4:	fb00 f303 	mul.w	r3, r0, r3
 80006e8:	440b      	add	r3, r1
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	6819      	ldr	r1, [r3, #0]
 80006ee:	4b61      	ldr	r3, [pc, #388]	; (8000874 <GPIO_Driver_Init+0x450>)
 80006f0:	6818      	ldr	r0, [r3, #0]
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	24c8      	movs	r4, #200	; 0xc8
 80006f6:	fb04 f303 	mul.w	r3, r4, r3
 80006fa:	4418      	add	r0, r3
 80006fc:	88bb      	ldrh	r3, [r7, #4]
 80006fe:	3310      	adds	r3, #16
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	4403      	add	r3, r0
 8000704:	88db      	ldrh	r3, [r3, #6]
 8000706:	461d      	mov	r5, r3
 8000708:	4b5a      	ldr	r3, [pc, #360]	; (8000874 <GPIO_Driver_Init+0x450>)
 800070a:	6818      	ldr	r0, [r3, #0]
 800070c:	88fb      	ldrh	r3, [r7, #6]
 800070e:	24c8      	movs	r4, #200	; 0xc8
 8000710:	fb04 f303 	mul.w	r3, r4, r3
 8000714:	4418      	add	r0, r3
 8000716:	88bb      	ldrh	r3, [r7, #4]
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	4403      	add	r3, r0
 800071c:	88db      	ldrh	r3, [r3, #6]
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	fa05 f303 	lsl.w	r3, r5, r3
 8000724:	430b      	orrs	r3, r1
 8000726:	6013      	str	r3, [r2, #0]
				GPIO_SETUP[index].GPIO_Port->OTYPER    |= ((uint16)((GPIO_SETUP[index].GPIO_Pin_OutputType[index1]) <<(GPIO_SETUP[index].GPIO_Pins[index1])));
 8000728:	4b52      	ldr	r3, [pc, #328]	; (8000874 <GPIO_Driver_Init+0x450>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	21c8      	movs	r1, #200	; 0xc8
 8000730:	fb01 f303 	mul.w	r3, r1, r3
 8000734:	4413      	add	r3, r2
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b4e      	ldr	r3, [pc, #312]	; (8000874 <GPIO_Driver_Init+0x450>)
 800073a:	6819      	ldr	r1, [r3, #0]
 800073c:	88fb      	ldrh	r3, [r7, #6]
 800073e:	20c8      	movs	r0, #200	; 0xc8
 8000740:	fb00 f303 	mul.w	r3, r0, r3
 8000744:	440b      	add	r3, r1
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	6859      	ldr	r1, [r3, #4]
 800074a:	4b4a      	ldr	r3, [pc, #296]	; (8000874 <GPIO_Driver_Init+0x450>)
 800074c:	6818      	ldr	r0, [r3, #0]
 800074e:	88fb      	ldrh	r3, [r7, #6]
 8000750:	24c8      	movs	r4, #200	; 0xc8
 8000752:	fb04 f303 	mul.w	r3, r4, r3
 8000756:	4418      	add	r0, r3
 8000758:	88bb      	ldrh	r3, [r7, #4]
 800075a:	3320      	adds	r3, #32
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	4403      	add	r3, r0
 8000760:	88db      	ldrh	r3, [r3, #6]
 8000762:	461d      	mov	r5, r3
 8000764:	4b43      	ldr	r3, [pc, #268]	; (8000874 <GPIO_Driver_Init+0x450>)
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	88fb      	ldrh	r3, [r7, #6]
 800076a:	24c8      	movs	r4, #200	; 0xc8
 800076c:	fb04 f303 	mul.w	r3, r4, r3
 8000770:	4418      	add	r0, r3
 8000772:	88bb      	ldrh	r3, [r7, #4]
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	4403      	add	r3, r0
 8000778:	88db      	ldrh	r3, [r3, #6]
 800077a:	fa05 f303 	lsl.w	r3, r5, r3
 800077e:	b29b      	uxth	r3, r3
 8000780:	430b      	orrs	r3, r1
 8000782:	6053      	str	r3, [r2, #4]
				GPIO_SETUP[index].GPIO_Port->OSPEEDR   |= ((uint32)((GPIO_SETUP[index].GPIO_Pin_Speed[index1]) <<(2*(GPIO_SETUP[index].GPIO_Pins[index1]))));
 8000784:	4b3b      	ldr	r3, [pc, #236]	; (8000874 <GPIO_Driver_Init+0x450>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	88fb      	ldrh	r3, [r7, #6]
 800078a:	21c8      	movs	r1, #200	; 0xc8
 800078c:	fb01 f303 	mul.w	r3, r1, r3
 8000790:	4413      	add	r3, r2
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	4b37      	ldr	r3, [pc, #220]	; (8000874 <GPIO_Driver_Init+0x450>)
 8000796:	6819      	ldr	r1, [r3, #0]
 8000798:	88fb      	ldrh	r3, [r7, #6]
 800079a:	20c8      	movs	r0, #200	; 0xc8
 800079c:	fb00 f303 	mul.w	r3, r0, r3
 80007a0:	440b      	add	r3, r1
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	6899      	ldr	r1, [r3, #8]
 80007a6:	4b33      	ldr	r3, [pc, #204]	; (8000874 <GPIO_Driver_Init+0x450>)
 80007a8:	6818      	ldr	r0, [r3, #0]
 80007aa:	88fb      	ldrh	r3, [r7, #6]
 80007ac:	24c8      	movs	r4, #200	; 0xc8
 80007ae:	fb04 f303 	mul.w	r3, r4, r3
 80007b2:	4418      	add	r0, r3
 80007b4:	88bb      	ldrh	r3, [r7, #4]
 80007b6:	3330      	adds	r3, #48	; 0x30
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	4403      	add	r3, r0
 80007bc:	88db      	ldrh	r3, [r3, #6]
 80007be:	461d      	mov	r5, r3
 80007c0:	4b2c      	ldr	r3, [pc, #176]	; (8000874 <GPIO_Driver_Init+0x450>)
 80007c2:	6818      	ldr	r0, [r3, #0]
 80007c4:	88fb      	ldrh	r3, [r7, #6]
 80007c6:	24c8      	movs	r4, #200	; 0xc8
 80007c8:	fb04 f303 	mul.w	r3, r4, r3
 80007cc:	4418      	add	r0, r3
 80007ce:	88bb      	ldrh	r3, [r7, #4]
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4403      	add	r3, r0
 80007d4:	88db      	ldrh	r3, [r3, #6]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	fa05 f303 	lsl.w	r3, r5, r3
 80007dc:	430b      	orrs	r3, r1
 80007de:	6093      	str	r3, [r2, #8]
				GPIO_SETUP[index].GPIO_Port->PUPDR     |= ((uint32)((GPIO_SETUP[index].GPIO_Pin_PuPd[index1]) <<(2*(GPIO_SETUP[index].GPIO_Pins[index1]))));
 80007e0:	4b24      	ldr	r3, [pc, #144]	; (8000874 <GPIO_Driver_Init+0x450>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	88fb      	ldrh	r3, [r7, #6]
 80007e6:	21c8      	movs	r1, #200	; 0xc8
 80007e8:	fb01 f303 	mul.w	r3, r1, r3
 80007ec:	4413      	add	r3, r2
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	4b20      	ldr	r3, [pc, #128]	; (8000874 <GPIO_Driver_Init+0x450>)
 80007f2:	6819      	ldr	r1, [r3, #0]
 80007f4:	88fb      	ldrh	r3, [r7, #6]
 80007f6:	20c8      	movs	r0, #200	; 0xc8
 80007f8:	fb00 f303 	mul.w	r3, r0, r3
 80007fc:	440b      	add	r3, r1
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	68d9      	ldr	r1, [r3, #12]
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <GPIO_Driver_Init+0x450>)
 8000804:	6818      	ldr	r0, [r3, #0]
 8000806:	88fb      	ldrh	r3, [r7, #6]
 8000808:	24c8      	movs	r4, #200	; 0xc8
 800080a:	fb04 f303 	mul.w	r3, r4, r3
 800080e:	4418      	add	r0, r3
 8000810:	88bb      	ldrh	r3, [r7, #4]
 8000812:	3340      	adds	r3, #64	; 0x40
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4403      	add	r3, r0
 8000818:	88db      	ldrh	r3, [r3, #6]
 800081a:	461d      	mov	r5, r3
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <GPIO_Driver_Init+0x450>)
 800081e:	6818      	ldr	r0, [r3, #0]
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	24c8      	movs	r4, #200	; 0xc8
 8000824:	fb04 f303 	mul.w	r3, r4, r3
 8000828:	4418      	add	r0, r3
 800082a:	88bb      	ldrh	r3, [r7, #4]
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4403      	add	r3, r0
 8000830:	88db      	ldrh	r3, [r3, #6]
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	fa05 f303 	lsl.w	r3, r5, r3
 8000838:	430b      	orrs	r3, r1
 800083a:	60d3      	str	r3, [r2, #12]
		for(index1=0x00;index1<GPIO_SETUP[index].GPIO_Pin_nr;index1++)
 800083c:	88bb      	ldrh	r3, [r7, #4]
 800083e:	3301      	adds	r3, #1
 8000840:	80bb      	strh	r3, [r7, #4]
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <GPIO_Driver_Init+0x450>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	88fb      	ldrh	r3, [r7, #6]
 8000848:	21c8      	movs	r1, #200	; 0xc8
 800084a:	fb01 f303 	mul.w	r3, r1, r3
 800084e:	4413      	add	r3, r2
 8000850:	889b      	ldrh	r3, [r3, #4]
 8000852:	88ba      	ldrh	r2, [r7, #4]
 8000854:	429a      	cmp	r2, r3
 8000856:	f4ff adf8 	bcc.w	800044a <GPIO_Driver_Init+0x26>
	for(index=0x00;index<GPIO_DRIVER_INSTANCE_NUM;index++)
 800085a:	88fb      	ldrh	r3, [r7, #6]
 800085c:	3301      	adds	r3, #1
 800085e:	80fb      	strh	r3, [r7, #6]
 8000860:	88fb      	ldrh	r3, [r7, #6]
 8000862:	2b00      	cmp	r3, #0
 8000864:	f43f adee 	beq.w	8000444 <GPIO_Driver_Init+0x20>
		}
	}
}
 8000868:	bf00      	nop
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	bcb0      	pop	{r4, r5, r7}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	200000e8 	.word	0x200000e8

08000878 <NVIC_Driver_SetInterrupt>:
 */

#include "NVIC_Driver_Cfg.h"

void NVIC_Driver_SetInterrupt(IRQn_Type IRQChannel, uint8 Preemption_Priority,uint8 Sub_Priority)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
 8000882:	460b      	mov	r3, r1
 8000884:	71bb      	strb	r3, [r7, #6]
 8000886:	4613      	mov	r3, r2
 8000888:	717b      	strb	r3, [r7, #5]
	uint8 PriorityGroup						 = 0x00;
 800088a:	2300      	movs	r3, #0
 800088c:	73fb      	strb	r3, [r7, #15]
	uint8 Configured_Group_priority_position = 0x00;
 800088e:	2300      	movs	r3, #0
 8000890:	73bb      	strb	r3, [r7, #14]
	uint8 Configured_Sub_priority_position 	 = 0x0F;
 8000892:	230f      	movs	r3, #15
 8000894:	737b      	strb	r3, [r7, #13]
	uint8 Configured_Group_priority 		 = 0x00;
 8000896:	2300      	movs	r3, #0
 8000898:	733b      	strb	r3, [r7, #12]
	uint8 Configured_Sub_priority 			 = 0x0F;
 800089a:	230f      	movs	r3, #15
 800089c:	72fb      	strb	r3, [r7, #11]
	uint8 Priority_Config 			 		 = 0x00;
 800089e:	2300      	movs	r3, #0
 80008a0:	72bb      	strb	r3, [r7, #10]

	/*Select the configured priority group*/
	PriorityGroup = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80008a2:	4b24      	ldr	r3, [pc, #144]	; (8000934 <NVIC_Driver_SetInterrupt+0xbc>)
 80008a4:	68db      	ldr	r3, [r3, #12]
 80008a6:	43db      	mvns	r3, r3
 80008a8:	0a1b      	lsrs	r3, r3, #8
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	f003 0307 	and.w	r3, r3, #7
 80008b0:	73fb      	strb	r3, [r7, #15]
	 * the maximum available value is 7
	 * Group prio. bits =  4 - (max.value-conf.prior.) <== these have to be shifted to left (XXXn.0000)
	 * Sub prio. bits = 0x0F >> (max.value-conf.prior.)  <== these have to be shifted to right  (nnnY.0000)
	 * */

	Configured_Sub_priority_position = Configured_Sub_priority_position >> (PriorityGroup);
 80008b2:	7b7a      	ldrb	r2, [r7, #13]
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	fa42 f303 	asr.w	r3, r2, r3
 80008ba:	737b      	strb	r3, [r7, #13]
	Configured_Group_priority_position = 0x04 - PriorityGroup;
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	f1c3 0304 	rsb	r3, r3, #4
 80008c2:	73bb      	strb	r3, [r7, #14]

	Configured_Group_priority = Preemption_Priority << Configured_Group_priority_position;
 80008c4:	79ba      	ldrb	r2, [r7, #6]
 80008c6:	7bbb      	ldrb	r3, [r7, #14]
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	733b      	strb	r3, [r7, #12]
	Configured_Sub_priority   = Sub_Priority & Configured_Sub_priority_position;
 80008ce:	797a      	ldrb	r2, [r7, #5]
 80008d0:	7b7b      	ldrb	r3, [r7, #13]
 80008d2:	4013      	ands	r3, r2
 80008d4:	72fb      	strb	r3, [r7, #11]
	/*The lower 4 bits are not used*/
	Priority_Config = ((Configured_Group_priority|Configured_Sub_priority)<<4);
 80008d6:	7b3a      	ldrb	r2, [r7, #12]
 80008d8:	7afb      	ldrb	r3, [r7, #11]
 80008da:	4313      	orrs	r3, r2
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	011b      	lsls	r3, r3, #4
 80008e0:	72bb      	strb	r3, [r7, #10]
	if(IRQChannel<0)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	da08      	bge.n	80008fc <NVIC_Driver_SetInterrupt+0x84>
	{
		/* set Priority for Cortex-M  System Interrupts */
		SCB->SHP[((uint32_t)(IRQChannel) & 0xF)-4] = Priority_Config;
 80008ea:	4a12      	ldr	r2, [pc, #72]	; (8000934 <NVIC_Driver_SetInterrupt+0xbc>)
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	f003 030f 	and.w	r3, r3, #15
 80008f2:	3b04      	subs	r3, #4
 80008f4:	4413      	add	r3, r2
 80008f6:	7aba      	ldrb	r2, [r7, #10]
 80008f8:	761a      	strb	r2, [r3, #24]
 80008fa:	e006      	b.n	800090a <NVIC_Driver_SetInterrupt+0x92>
	}
	else
	{
		NVIC->IP[IRQChannel] = Priority_Config;
 80008fc:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <NVIC_Driver_SetInterrupt+0xc0>)
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	4413      	add	r3, r2
 8000904:	7aba      	ldrb	r2, [r7, #10]
 8000906:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300


	/*Set the given interrupt. To select the correct register from the available 4, the channel number has
	 * to be shifted to the left by 5 (division by 32, because each register can hold 32 values)
	 * to write the channel to the given position (IRQ = 7 goes to position 7)*/
    NVIC->ISER[IRQChannel >> 0x05] =
 800090a:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <NVIC_Driver_SetInterrupt+0xc0>)
 800090c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000910:	115b      	asrs	r3, r3, #5
 8000912:	b25b      	sxtb	r3, r3
 8000914:	4618      	mov	r0, r3
      (uint32_t)0x01 << (IRQChannel & (uint8_t)0x1F);
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	f003 031f 	and.w	r3, r3, #31
 800091c:	2101      	movs	r1, #1
 800091e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[IRQChannel >> 0x05] =
 8000922:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    /*The final &-ing is used to assure that the channel number isn't bigger the 31
     * The bigger values will be subtracted this way, to the correct position number
     * */
}
 8000926:	bf00      	nop
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00
 8000938:	e000e100 	.word	0xe000e100

0800093c <NVIC_Driver_PriorityGroupConfig>:
	NVIC->ICER[IRQChannel >> 0x05] =
	      (uint32_t)0x01 << (IRQChannel & (uint8_t)0x1F);
}

void NVIC_Driver_PriorityGroupConfig(uint8 Prioritygroup)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
	uint32 Old_register_value = 0x00;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
	uint32 New_register_value = 0x00;
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]

	Old_register_value = SCB->AIRCR;
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <NVIC_Driver_PriorityGroupConfig+0x48>)
 8000950:	68db      	ldr	r3, [r3, #12]
 8000952:	60fb      	str	r3, [r7, #12]
	Old_register_value &= ~(NVIC_DRIVER_AIRCR_VECTORKEY_CLEAR_MASK|NVIC_DRIVER_PRIORITY_GROUP_MASK);
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800095a:	4013      	ands	r3, r2
 800095c:	60fb      	str	r3, [r7, #12]

	New_register_value = (Old_register_value)|(NVIC_DRIVER_AIRCR_VECTORKEY_MASK)|(Prioritygroup<<8);
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	021b      	lsls	r3, r3, #8
 8000962:	461a      	mov	r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	4313      	orrs	r3, r2
 8000968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800096c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000970:	60bb      	str	r3, [r7, #8]

	SCB->AIRCR = New_register_value;
 8000972:	4a04      	ldr	r2, [pc, #16]	; (8000984 <NVIC_Driver_PriorityGroupConfig+0x48>)
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	60d3      	str	r3, [r2, #12]
}
 8000978:	bf00      	nop
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <NVIC_Driver_Set_SYSTICK_Interrupt>:
	}
#endif

#if (NVIC_DRIVER_SYSTICK_INTERRUPT_ENABLE == OK)
	void NVIC_Driver_Set_SYSTICK_Interrupt(uint8 Preemption_priority,uint8 Sub_priority)
	{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	460a      	mov	r2, r1
 8000992:	71fb      	strb	r3, [r7, #7]
 8000994:	4613      	mov	r3, r2
 8000996:	71bb      	strb	r3, [r7, #6]
		/*Enable the Systick interrupt */
		SysTick->CTRL|=(0x01<<0x01);
 8000998:	4a08      	ldr	r2, [pc, #32]	; (80009bc <NVIC_Driver_Set_SYSTICK_Interrupt+0x34>)
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <NVIC_Driver_Set_SYSTICK_Interrupt+0x34>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f043 0302 	orr.w	r3, r3, #2
 80009a2:	6013      	str	r3, [r2, #0]
		NVIC_Driver_SetInterrupt(SysTick_IRQn,Preemption_priority,Sub_priority);
 80009a4:	79ba      	ldrb	r2, [r7, #6]
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f04f 30ff 	mov.w	r0, #4294967295
 80009ae:	f7ff ff63 	bl	8000878 <NVIC_Driver_SetInterrupt>
	}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	e000e010 	.word	0xe000e010

080009c0 <SysTick_Handler>:
#include "SYSTICK_Driver_Cfg.h"

static volatile uint32 Tick_Counter=0x00;

void SysTick_Handler()
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
	if(Tick_Counter!=0x00)
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <SysTick_Handler+0x20>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d004      	beq.n	80009d6 <SysTick_Handler+0x16>
	{
		Tick_Counter--;
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <SysTick_Handler+0x20>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	3b01      	subs	r3, #1
 80009d2:	4a03      	ldr	r2, [pc, #12]	; (80009e0 <SysTick_Handler+0x20>)
 80009d4:	6013      	str	r3, [r2, #0]
	}
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	20000108 	.word	0x20000108

080009e4 <SYSTICK_Driver_Init>:

void SYSTICK_Driver_Init()
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	/*Set the processor clock as the clock source */
	SysTick->CTRL |= (0x01 << 0x02);
 80009e8:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <SYSTICK_Driver_Init+0x34>)
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <SYSTICK_Driver_Init+0x34>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f043 0304 	orr.w	r3, r3, #4
 80009f2:	6013      	str	r3, [r2, #0]
#if(SYSTICK_DRIVER_ENABLE_INTERRUPT == OK)

#if(NVIC_DRIVER_SYSTICK_INTERRUPT_ENABLE==OK)
	/*Set the timer interrupt and its priority and sub-priority*/
	NVIC_Driver_PriorityGroupConfig(NVIC_DRIVER_PRIORITY_GRUP_4);
 80009f4:	2003      	movs	r0, #3
 80009f6:	f7ff ffa1 	bl	800093c <NVIC_Driver_PriorityGroupConfig>
	NVIC_Driver_Set_SYSTICK_Interrupt(0x0F, 0x00);
 80009fa:	2100      	movs	r1, #0
 80009fc:	200f      	movs	r0, #15
 80009fe:	f7ff ffc3 	bl	8000988 <NVIC_Driver_Set_SYSTICK_Interrupt>
#endif

#endif
	/*Init the Systick current value register*/
	SysTick->VAL = 0x00;
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <SYSTICK_Driver_Init+0x34>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
	/*Set the load register with the configured value*/
	SysTick->LOAD = ((SYSTICK_DRIVER_LOAD & 0xFFFFFFUL) - 1);
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <SYSTICK_Driver_Init+0x34>)
 8000a0a:	22b3      	movs	r2, #179	; 0xb3
 8000a0c:	605a      	str	r2, [r3, #4]

	SYSTICK_Driver_Start();
 8000a0e:	f000 f805 	bl	8000a1c <SYSTICK_Driver_Start>
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	e000e010 	.word	0xe000e010

08000a1c <SYSTICK_Driver_Start>:

void SYSTICK_Driver_Start()
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
	/*Enable the systick timer*/
	SysTick->CTRL|=0x01;
 8000a20:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <SYSTICK_Driver_Start+0x1c>)
 8000a22:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <SYSTICK_Driver_Start+0x1c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	6013      	str	r3, [r2, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000e010 	.word	0xe000e010

08000a3c <SYSTICK_Driver_Delay_us>:
}

#elif (SYSTICK_DRIVER_LOAD == ((SYSTICK_DRIVER_WORKING_FREQUENCY)/1000000))

void SYSTICK_Driver_Delay_us(uint32 DelayInterval)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	Tick_Counter = DelayInterval;
 8000a44:	4a06      	ldr	r2, [pc, #24]	; (8000a60 <SYSTICK_Driver_Delay_us+0x24>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6013      	str	r3, [r2, #0]
	while(Tick_Counter!=0x00){}
 8000a4a:	bf00      	nop
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <SYSTICK_Driver_Delay_us+0x24>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1fb      	bne.n	8000a4c <SYSTICK_Driver_Delay_us+0x10>
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	20000108 	.word	0x20000108

08000a64 <WWDG_IRQHandler>:
#if (WWDT_DRIVER_INTERRUPT_ENABLED == OK)

extern void GPIO_Driver_Lambda_function();

void WWDG_IRQHandler()
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	WWDT_Driver_Refresh_WWDT_Counter();
 8000a68:	f000 f804 	bl	8000a74 <WWDT_Driver_Refresh_WWDT_Counter>
	WWDT_Driver_Clear_Interrupt_Flag();
 8000a6c:	f000 f812 	bl	8000a94 <WWDT_Driver_Clear_Interrupt_Flag>
	/*GPIO_Driver_Lambda_function();*/
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <WWDT_Driver_Refresh_WWDT_Counter>:
	WWDG->CR |= WWDT_DRIVER_ACTIVATION|WWDT_DRIVER_T6_BIT_SET|WWDT_DRIVER_COUNTER_VALUE;

}

void WWDT_Driver_Refresh_WWDT_Counter()
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
	WWDG->CR |= WWDT_DRIVER_T6_BIT_SET|WWDT_DRIVER_COUNTER_VALUE;
 8000a78:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <WWDT_Driver_Refresh_WWDT_Counter+0x1c>)
 8000a7a:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <WWDT_Driver_Refresh_WWDT_Counter+0x1c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8000a82:	6013      	str	r3, [r2, #0]
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40002c00 	.word	0x40002c00

08000a94 <WWDT_Driver_Clear_Interrupt_Flag>:
	/*Set the T6 bit to 0, forcing the WWDT to reset the MC */
	WWDG->CR &= WWDT_DRIVER_T6_BIT_CLEAR;
}

void WWDT_Driver_Clear_Interrupt_Flag()
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0

	WWDG->SR = 0x00;
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <WWDT_Driver_Clear_Interrupt_Flag+0x14>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	40002c00 	.word	0x40002c00

08000aac <main>:

uint16 counter  = 0x00;
uint8  sign     = 0x00;

int main()
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0

	SYSTICK_Driver_Init();
 8000ab0:	f7ff ff98 	bl	80009e4 <SYSTICK_Driver_Init>
	GPIO_Driver_Init();
 8000ab4:	f7ff fcb6 	bl	8000424 <GPIO_Driver_Init>
	DAC_Driver_Init();
 8000ab8:	f7ff fb98 	bl	80001ec <DAC_Driver_Init>

	while (1)
	{
		DAC_Driver_SW_Start(DAC_DRIVER_CHANNEL1);
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff fc91 	bl	80003e4 <DAC_Driver_SW_Start>
		SYSTICK_Driver_Delay_us(50);
 8000ac2:	2032      	movs	r0, #50	; 0x32
 8000ac4:	f7ff ffba 	bl	8000a3c <SYSTICK_Driver_Delay_us>
		DAC_Driver_SW_Start(DAC_DRIVER_CHANNEL1);
 8000ac8:	e7f8      	b.n	8000abc <main+0x10>
	...

08000acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b04 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ad0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ad2:	e003      	b.n	8000adc <LoopCopyDataInit>

08000ad4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ad6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ad8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ada:	3104      	adds	r1, #4

08000adc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000adc:	480b      	ldr	r0, [pc, #44]	; (8000b0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ae0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ae2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ae4:	d3f6      	bcc.n	8000ad4 <CopyDataInit>
  ldr  r2, =_sbss
 8000ae6:	4a0b      	ldr	r2, [pc, #44]	; (8000b14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ae8:	e002      	b.n	8000af0 <LoopFillZerobss>

08000aea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000aea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000aec:	f842 3b04 	str.w	r3, [r2], #4

08000af0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000af2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000af4:	d3f9      	bcc.n	8000aea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000af6:	f000 f813 	bl	8000b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000afa:	f000 f8c3 	bl	8000c84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afe:	f7ff ffd5 	bl	8000aac <main>
  bx  lr    
 8000b02:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b04:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000b08:	08000cec 	.word	0x08000cec
  ldr  r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b10:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 8000b14:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 8000b18:	2000010c 	.word	0x2000010c

08000b1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b1c:	e7fe      	b.n	8000b1c <ADC_IRQHandler>
	...

08000b20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b24:	4a16      	ldr	r2, [pc, #88]	; (8000b80 <SystemInit+0x60>)
 8000b26:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <SystemInit+0x60>)
 8000b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b34:	4a13      	ldr	r2, [pc, #76]	; (8000b84 <SystemInit+0x64>)
 8000b36:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <SystemInit+0x64>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b40:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <SystemInit+0x64>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b46:	4a0f      	ldr	r2, [pc, #60]	; (8000b84 <SystemInit+0x64>)
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <SystemInit+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b54:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <SystemInit+0x64>)
 8000b58:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <SystemInit+0x68>)
 8000b5a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b5c:	4a09      	ldr	r2, [pc, #36]	; (8000b84 <SystemInit+0x64>)
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <SystemInit+0x64>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <SystemInit+0x64>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000b6e:	f000 f80d 	bl	8000b8c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b72:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <SystemInit+0x60>)
 8000b74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b78:	609a      	str	r2, [r3, #8]
#endif
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00
 8000b84:	40023800 	.word	0x40023800
 8000b88:	24003010 	.word	0x24003010

08000b8c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000b9a:	4a36      	ldr	r2, [pc, #216]	; (8000c74 <SetSysClock+0xe8>)
 8000b9c:	4b35      	ldr	r3, [pc, #212]	; (8000c74 <SetSysClock+0xe8>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000ba6:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <SetSysClock+0xe8>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bae:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d103      	bne.n	8000bc4 <SetSysClock+0x38>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000bc2:	d1f0      	bne.n	8000ba6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000bc4:	4b2b      	ldr	r3, [pc, #172]	; (8000c74 <SetSysClock+0xe8>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d002      	beq.n	8000bd6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	e001      	b.n	8000bda <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d142      	bne.n	8000c66 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000be0:	4a24      	ldr	r2, [pc, #144]	; (8000c74 <SetSysClock+0xe8>)
 8000be2:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <SetSysClock+0xe8>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bea:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000bec:	4a22      	ldr	r2, [pc, #136]	; (8000c78 <SetSysClock+0xec>)
 8000bee:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <SetSysClock+0xec>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bf6:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000bf8:	4a1e      	ldr	r2, [pc, #120]	; (8000c74 <SetSysClock+0xe8>)
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <SetSysClock+0xe8>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000c00:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <SetSysClock+0xe8>)
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <SetSysClock+0xe8>)
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c0a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000c0c:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <SetSysClock+0xe8>)
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <SetSysClock+0xe8>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000c16:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000c18:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <SetSysClock+0xe8>)
 8000c1a:	4a18      	ldr	r2, [pc, #96]	; (8000c7c <SetSysClock+0xf0>)
 8000c1c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000c1e:	4a15      	ldr	r2, [pc, #84]	; (8000c74 <SetSysClock+0xe8>)
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <SetSysClock+0xe8>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c28:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000c2a:	bf00      	nop
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <SetSysClock+0xe8>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d0f9      	beq.n	8000c2c <SetSysClock+0xa0>
    {
    }
   
#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <SetSysClock+0xf4>)
 8000c3a:	f240 7205 	movw	r2, #1797	; 0x705
 8000c3e:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000c40:	4a0c      	ldr	r2, [pc, #48]	; (8000c74 <SetSysClock+0xe8>)
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <SetSysClock+0xe8>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	f023 0303 	bic.w	r3, r3, #3
 8000c4a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000c4c:	4a09      	ldr	r2, [pc, #36]	; (8000c74 <SetSysClock+0xe8>)
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <SetSysClock+0xe8>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	f043 0302 	orr.w	r3, r3, #2
 8000c56:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8000c58:	bf00      	nop
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <SetSysClock+0xe8>)
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f003 030c 	and.w	r3, r3, #12
 8000c62:	2b08      	cmp	r3, #8
 8000c64:	d1f9      	bne.n	8000c5a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40007000 	.word	0x40007000
 8000c7c:	07402d04 	.word	0x07402d04
 8000c80:	40023c00 	.word	0x40023c00

08000c84 <__libc_init_array>:
 8000c84:	b570      	push	{r4, r5, r6, lr}
 8000c86:	4e0d      	ldr	r6, [pc, #52]	; (8000cbc <__libc_init_array+0x38>)
 8000c88:	4c0d      	ldr	r4, [pc, #52]	; (8000cc0 <__libc_init_array+0x3c>)
 8000c8a:	1ba4      	subs	r4, r4, r6
 8000c8c:	10a4      	asrs	r4, r4, #2
 8000c8e:	2500      	movs	r5, #0
 8000c90:	42a5      	cmp	r5, r4
 8000c92:	d109      	bne.n	8000ca8 <__libc_init_array+0x24>
 8000c94:	4e0b      	ldr	r6, [pc, #44]	; (8000cc4 <__libc_init_array+0x40>)
 8000c96:	4c0c      	ldr	r4, [pc, #48]	; (8000cc8 <__libc_init_array+0x44>)
 8000c98:	f000 f818 	bl	8000ccc <_init>
 8000c9c:	1ba4      	subs	r4, r4, r6
 8000c9e:	10a4      	asrs	r4, r4, #2
 8000ca0:	2500      	movs	r5, #0
 8000ca2:	42a5      	cmp	r5, r4
 8000ca4:	d105      	bne.n	8000cb2 <__libc_init_array+0x2e>
 8000ca6:	bd70      	pop	{r4, r5, r6, pc}
 8000ca8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cac:	4798      	blx	r3
 8000cae:	3501      	adds	r5, #1
 8000cb0:	e7ee      	b.n	8000c90 <__libc_init_array+0xc>
 8000cb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cb6:	4798      	blx	r3
 8000cb8:	3501      	adds	r5, #1
 8000cba:	e7f2      	b.n	8000ca2 <__libc_init_array+0x1e>
 8000cbc:	08000ce4 	.word	0x08000ce4
 8000cc0:	08000ce4 	.word	0x08000ce4
 8000cc4:	08000ce4 	.word	0x08000ce4
 8000cc8:	08000ce8 	.word	0x08000ce8

08000ccc <_init>:
 8000ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cce:	bf00      	nop
 8000cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cd2:	bc08      	pop	{r3}
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	4770      	bx	lr

08000cd8 <_fini>:
 8000cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cda:	bf00      	nop
 8000cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cde:	bc08      	pop	{r3}
 8000ce0:	469e      	mov	lr, r3
 8000ce2:	4770      	bx	lr
